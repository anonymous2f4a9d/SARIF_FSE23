# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//drivers/adapter/uhdf2/uhdf.gni")
import(
    "//foundation/distributedhardware/distributedcamera/distributedcamera.gni")

ohos_shared_library("distributed_camera_hdf_client") {
  include_dirs = [
    "../",
    "../../include",
    "//utils/native/base/include",
    "//utils/system/safwk/native/include",
    "${fwk_common_path}/log/include",
    "${fwk_common_path}/utils/include/",
    "${fwk_utils_path}/include",
    "${fwk_utils_path}/include/log",
    "${hdf_framework_path}/include/utils",
    "${hdf_uhdf_path}/include/hdi",
    "${hdf_uhdf_path}/osal/include",
    "//drivers/peripheral/base",

    #producer
    "//foundation/graphic/standard/frameworks/surface/include",
    "//foundation/graphic/standard/interfaces/kits/surface",
    "//foundation/graphic/standard/utils/include",
    "//foundation/communication/ipc/ipc/native/src/core/include",
    "//foundation/multimedia/camera_standard/frameworks/native/metadata/include",
  ]

  cflags = [
    "-fPIC",
    "-Wall",
  ]

  if (device_name == "baltimore") {
    cflags += [ "-DBALTIMORE_CAMERA" ]
    include_dirs += [ "${camera_hdf_path_baltimore}/camera/interfaces/include" ]
  } else {
    include_dirs += [
      "${camera_hdf_path}/camera/interfaces/include",
      "${camera_hdf_path}/camera/interfaces/hdi_ipc",
    ]
  }

  sources = [
    "device/dcamera_device_callback.cpp",
    "device/dcamera_device_callback_stub.cpp",
    "device/dcamera_device_proxy.cpp",
    "host/dcamera_host_callback.cpp",
    "host/dcamera_host_callback_stub.cpp",
    "host/dcamera_host_proxy.cpp",
    "operator/doffline_stream_operator_proxy.cpp",
    "operator/dstream_operator_callback.cpp",
    "operator/dstream_operator_callback_stub.cpp",
    "operator/dstream_operator_proxy.cpp",
    "provider/dcamera_provider_callback.cpp",
    "provider/dcamera_provider_callback_stub.cpp",
    "provider/dcamera_provider_proxy.cpp",
  ]

  deps = [
    "${fwk_utils_path}:distributedhardwareutils",
    "${hdf_uhdf_path}/hdi:libhdi",
    "//drivers/peripheral/display/hal:hdi_display_gralloc",
    "//foundation/graphic/standard/frameworks/surface:surface",
    "//foundation/multimedia/camera_standard/frameworks/native/metadata:metadata",
    "//utils/native/base:utils",
  ]

  defines = [
    "HI_LOG_ENABLE",
    "DH_LOG_TAG=\"distributedcamerahdf\"",
    "LOG_DOMAIN=0xD004100",
  ]

  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_single",
  ]

  cflags_cc = cflags
  subsystem_name = "distributedhardware"
  part_name = "distributed_camera"
}
