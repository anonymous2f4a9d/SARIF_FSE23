# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/ohos_var.gni")
import("//foundation/distributedhardware/distributedcamera/distributedcamera.gni")

ohos_shared_library("distributed_camera_source") {
  include_dirs = [
    "//utils/native/base/include",
    "//utils/system/safwk/native/include",
    "${fwk_common_path}/log/include",
    "${fwk_common_path}/utils/include",
    "${fwk_utils_path}/include/eventbus",
    "${fwk_utils_path}/include/log",
    "${fwk_utils_path}/include",
    "//third_party/jsoncpp/include",
    "//drivers/peripheral/base",
  ]

  include_dirs += [
    "include/distributedcamera",
    "include/distributedcameramgr",
    "include/distributedcameramgr/dcamerainterface",
    "include/distributedcameramgr/dcamerastate",
    "include/distributedcameramgr/dcameracontrol",
    "include/distributedcameramgr/dcameradata",
    "include/distributedcameramgr/dcamerahdf",
    "${common_path}/include/constants",
    "${common_path}/include/utils",
    "${innerkits_path}/native_cpp/camera_source/include",
    "${innerkits_path}/native_cpp/camera_sink/include",
    "${innerkits_path}/native_cpp/camera_source/include/callback",
    "${distributedcamera_hdf_path}/interfaces/include",
    "${distributedcamera_hdf_path}/interfaces/hdi_ipc/client/provider",
    "${services_path}/cameraservice/base/include",
    "${services_path}/channel/include",
    "${services_path}/data_process/include/eventbus",
    "${services_path}/data_process/include/interfaces",
    "${services_path}/data_process/include/pipeline",
    "${services_path}/data_process/include/utils",
  ]

  sources = [
      "src/distributedcamera/dcamera_service_state_listener.cpp",
      "src/distributedcamera/distributed_camera_source_service.cpp",
      "${innerkits_path}/native_cpp/camera_sink/src/distributed_camera_sink_proxy.cpp",
      "src/distributedcamera/distributed_camera_source_stub.cpp",
      "src/distributedcamera/dcamera_source_callback_proxy.cpp",
      "src/distributedcameramgr/dcamera_source_dev.cpp",
      "src/distributedcameramgr/dcamera_source_event.cpp",
      "src/distributedcameramgr/dcamera_source_service_ipc.cpp",
      "src/distributedcameramgr/dcamerastate/dcamera_source_state_factory.cpp",
      "src/distributedcameramgr/dcamerastate/dcamera_source_state_machine.cpp",
      "src/distributedcameramgr/dcamerastate/dcamera_source_init_state.cpp",
      "src/distributedcameramgr/dcamerastate/dcamera_source_regist_state.cpp",
      "src/distributedcameramgr/dcamerastate/dcamera_source_opened_state.cpp",
      "src/distributedcameramgr/dcamerastate/dcamera_source_config_stream_state.cpp",
      "src/distributedcameramgr/dcamerastate/dcamera_source_capture_state.cpp",
      "src/distributedcameramgr/dcameracontrol/dcamera_source_controller.cpp",
      "src/distributedcameramgr/dcameracontrol/dcamera_source_controller_channel_listener.cpp",
      "${services_path}/cameraservice/base/src/dcamera_capture_info_cmd.cpp",
      "${services_path}/cameraservice/base/src/dcamera_channel_info_cmd.cpp",
      "${services_path}/cameraservice/base/src/dcamera_event_cmd.cpp",
      "${services_path}/cameraservice/base/src/dcamera_info_cmd.cpp",
      "${services_path}/cameraservice/base/src/dcamera_metadata_setting_cmd.cpp",
      "${services_path}/cameraservice/base/src/dcamera_open_info_cmd.cpp",

      "src/distributedcameramgr/dcameradata/dcamera_source_data_process.cpp",
      "src/distributedcameramgr/dcameradata/dcamera_source_input_channel_listener.cpp",
      "src/distributedcameramgr/dcameradata/dcamera_source_input.cpp",
      "src/distributedcameramgr/dcameradata/dcamera_stream_data_process_pipeline_listener.cpp",
      "src/distributedcameramgr/dcameradata/dcamera_stream_data_process_producer.cpp",
      "src/distributedcameramgr/dcameradata/dcamera_stream_data_process.cpp",
      "src/distributedcameramgr/dcamerahdf/dcamera_provider_callback_impl.cpp",
  ]

  deps = [
    "${fwk_utils_path}:distributedhardwareutils",
    "${common_path}:distributed_camera_utils",
    "${services_path}/channel:distributed_camera_channel",
    "${services_path}/data_process:distributed_camera_data_process",
    "${distributedcamera_hdf_path}/interfaces/hdi_ipc/client:distributed_camera_hdf_client",
    "//utils/native/base:utils",
    "//third_party/jsoncpp:jsoncpp",
  ]

  defines = [
    "HI_LOG_ENABLE",
    "DH_LOG_TAG=\"dcamerasourcesvr\"",
    "LOG_DOMAIN=0xD004100",
  ]

  external_deps = [
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
  ]

  subsystem_name = "distributedhardware"

  part_name = "distributed_camera"
}